config {
    description: "Mapa completo dos produtos e suas informações feitas por pedido",
    type: "view",
    schema: "staging",
    columns: {
        order_id: "Identificador único do pedido",
        product_id: "Identificador único do produto",
        product_name: "Nome do produto",
        category_name: "Nome da categoria do produto",
        category_id: "Identificador da categoria do produto",
        subcategory_id: "Identificador da subcategoria do produto",
        subcategory_name: "Nome da subcategoria do produto",
        product_sku: "SKU (Stock Keeping Unit) do produto",
        quantity: "Quantidade do produto no pedido",
        price_unit: "Preço unitário do produto",
        price_discount: "Valor do desconto aplicado ao produto",
        price_total: "Preço total do produto no pedido (quantidade * preço unitário - desconto)"
    },
    tags: ['1-general', '1.1-preorder']
}

  -- Este script extrai as informações de produtos comprados,
  -- e já prepara no formato certo para fazer parte dos pedidos depois como um ARRAY de STRUCT da tabela Orders
  -- o que tiver de informação aqui será inserida o array de itens dentro da tabela "Orders"
SELECT
  OP.order_id,
  OP.product_id AS product_id,
  OP.product_sku AS product_sku,
  PC.product_name AS product_name,
  PC.category_name_level0 AS category_name,
  PC.category_id_level0 AS category_id,
  PC.category_name_level1 AS subcategory_name,
  PC.category_id_level1 AS subcategory_id,
--  PC.category_name AS category_name,
--  PC.category_id AS category_id,
--  PC.subcategory_name AS subcategory_name,
--  PC.subcategory_id AS subcategory_id,
  -- Dados do pedido
  OP.quantity,
  OP.price_unit,
  OP.price_discount,
  OP.price_total
FROM
  ${ref("stand_" + dataform.projectConfig.vars.ecommPlatName + "_orders_prod")} OP
LEFT JOIN
  ${ref("stg_prod_cat")} PC
ON
  OP.product_id = PC.product_id